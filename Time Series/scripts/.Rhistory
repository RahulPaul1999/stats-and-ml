sqldf("
/* sql comments can be used */
/* Not as nice as mySQL: show tables; */
SELECT * FROM pg_catalog.pg_tables WHERE schemaname = 'public';
")
# If necessary download the file (can be improved to download if > n days old)
dbUrl <- "http://burntsushi.net/stuff/nfldb/nfldb.sql.zip"
dbDir = "./data"
dbZipPath <- "./data/nfldb.zip.sql"
dbPath <- "./data/nfldb.sql"
dateDownloadedFile <- "./data/dateDownloaded.txt"
if (!file.exists(dbDir)) {
dir.create(dbDir)
}
if (!file.exists(dbPath)) {
download.file(dbUrl, destfile = dbZipPath)
unzip(dbZipPath, exdir=dbDir)
dateDownloaded <- date()
dateDownloaded
cat(dateDownloaded, file=dateDownloadedFile)
print(paste("Downloaded database", dbPath, "at"))
cat(readChar(dateDownloadedFile, 1e5))
} else if (file.exists(dateDownloadedFile)) {
print(paste("Database", dbPath, "downloaded on"))
cat(readChar(dateDownloadedFile, 1e5))
}
library("sqldf")
options(sqldf.RPostgreSQL.user ="postgres",
#sqldf.RPostgreSQL.password ="password", # Set above and not echoed
sqldf.RPostgreSQL.dbname ="nfldb",
sqldf.RPostgreSQL.host ="localhost",
sqldf.RPostgreSQL.port =5432)
sqldf("
/* sql comments can be used */
/* Not as nice as mySQL: show tables; */
SELECT * FROM pg_catalog.pg_tables WHERE schemaname = 'public';
")
install.packages("RH2")
require(RH2)
options(sqldf.RPostgreSQL.user ="postgres",
#sqldf.RPostgreSQL.password ="password", # Set above and not echoed
sqldf.RPostgreSQL.dbname ="nfldb",
sqldf.RPostgreSQL.host ="localhost",
sqldf.RPostgreSQL.port =5432)
sqldf("
/* sql comments can be used */
/* Not as nice as mySQL: show tables; */
SELECT * FROM pg_catalog.pg_tables WHERE schemaname = 'public';
")
# If necessary download the file (can be improved to download if > n days old)
dbUrl <- "http://burntsushi.net/stuff/nfldb/nfldb.sql.zip"
dbDir = "./data"
dbZipPath <- "./data/nfldb.zip.sql"
dbPath <- "./data/nfldb.sql"
dateDownloadedFile <- "./data/dateDownloaded.txt"
if (!file.exists(dbDir)) {
dir.create(dbDir)
}
if (!file.exists(dbPath)) {
download.file(dbUrl, destfile = dbZipPath)
unzip(dbZipPath, exdir=dbDir)
dateDownloaded <- date()
dateDownloaded
cat(dateDownloaded, file=dateDownloadedFile)
print(paste("Downloaded database", dbPath, "at"))
cat(readChar(dateDownloadedFile, 1e5))
} else if (file.exists(dateDownloadedFile)) {
print(paste("Database", dbPath, "downloaded on"))
cat(readChar(dateDownloadedFile, 1e5))
}
library(sqldf)
library(RPostgreSQL)
library(RH2)
options(sqldf.RPostgreSQL.user ="postgres",
#sqldf.RPostgreSQL.password ="password", # Set above and not echoed
sqldf.RPostgreSQL.dbname ="nfldb",
sqldf.RPostgreSQL.host ="localhost",
sqldf.RPostgreSQL.port =5432)
sqldf("
/* sql comments can be used */
/* Not as nice as mySQL: show tables; */
SELECT * FROM pg_catalog.pg_tables WHERE schemaname = 'public';
")
# If necessary download the file (can be improved to download if > n days old)
dbUrl <- "http://burntsushi.net/stuff/nfldb/nfldb.sql.zip"
dbDir = "./data"
dbZipPath <- "./data/nfldb.zip.sql"
dbPath <- "./data/nfldb.sql"
dateDownloadedFile <- "./data/dateDownloaded.txt"
if (!file.exists(dbDir)) {
dir.create(dbDir)
}
if (!file.exists(dbPath)) {
download.file(dbUrl, destfile = dbZipPath)
unzip(dbZipPath, exdir=dbDir)
dateDownloaded <- date()
dateDownloaded
cat(dateDownloaded, file=dateDownloadedFile)
print(paste("Downloaded database", dbPath, "at"))
cat(readChar(dateDownloadedFile, 1e5))
} else if (file.exists(dateDownloadedFile)) {
print(paste("Database", dbPath, "downloaded on"))
cat(readChar(dateDownloadedFile, 1e5))
}
if (!require(RPostgreSQL)) {
install.packages("RPostgreSQL")
library(RPostgreSQL)
}
library(sqldf)
options(sqldf.RPostgreSQL.user ="postgres",
#sqldf.RPostgreSQL.password ="password", # Set above and not echoed
sqldf.RPostgreSQL.dbname ="nfldb",
sqldf.RPostgreSQL.host ="localhost",
sqldf.RPostgreSQL.port =5432)
sqldf("
/* sql comments can be used */
/* Not as nice as mySQL: show tables; */
SELECT * FROM pg_catalog.pg_tables WHERE schemaname = 'public';
")
library(RPostgreSQL)
options(sqldf.RPostgreSQL.user ="postgres",
#sqldf.RPostgreSQL.password ="password", # Set above and not echoed
sqldf.RPostgreSQL.dbname ="nfldb",
sqldf.RPostgreSQL.host ="localhost",
sqldf.RPostgreSQL.port =5432)
sqldf("
/* sql comments can be used */
/* Not as nice as mySQL: show tables; */
SELECT * FROM pg_catalog.pg_tables WHERE schemaname = 'public';
")
# If necessary download the file (can be improved to download if > n days old)
dbUrl <- "http://burntsushi.net/stuff/nfldb/nfldb.sql.zip"
dbDir = "./data"
dbZipPath <- "./data/nfldb.zip.sql"
dbPath <- "./data/nfldb.sql"
dateDownloadedFile <- "./data/dateDownloaded.txt"
if (!file.exists(dbDir)) {
dir.create(dbDir)
}
if (!file.exists(dbPath)) {
download.file(dbUrl, destfile = dbZipPath)
unzip(dbZipPath, exdir=dbDir)
dateDownloaded <- date()
dateDownloaded
cat(dateDownloaded, file=dateDownloadedFile)
print(paste("Downloaded database", dbPath, "at"))
cat(readChar(dateDownloadedFile, 1e5))
} else if (file.exists(dateDownloadedFile)) {
print(paste("Database", dbPath, "downloaded on"))
cat(readChar(dateDownloadedFile, 1e5))
}
if (!require(RPostgreSQL)) {
install.packages("RPostgreSQL")
library(RPostgreSQL)
}
library(sqldf)
?options
?sqldf
# different way, by setting RPostgreSQL options:
options(sqldf.RPostgreSQL.user ="postgres",
sqldf.RPostgreSQL.password ="password", # Set above and not echoed
sqldf.RPostgreSQL.dbname ="nfldb",
sqldf.RPostgreSQL.host ="localhost",
sqldf.RPostgreSQL.port =5432)
sqldf("
/* sql comments can be used */
/* Not as nice as mySQL: show tables; */
SELECT * FROM pg_catalog.pg_tables WHERE schemaname = 'public';
")
options(sqldf.driver = "PostgreSQL",
sqldf.RPostgreSQL.user ="postgres",
sqldf.RPostgreSQL.password ="password", # Set above and not echoed
sqldf.RPostgreSQL.dbname ="nfldb",
sqldf.RPostgreSQL.host ="localhost",
sqldf.RPostgreSQL.port =5432)
sqldf("
/* sql comments can be used */
/* Not as nice as mySQL: show tables; */
SELECT * FROM pg_catalog.pg_tables WHERE schemaname = 'public';
")
# different way, by setting RPostgreSQL options:
options(sqldf.RPostgreSQL.driver = "PostgreSQL",
sqldf.RPostgreSQL.user ="postgres",
sqldf.RPostgreSQL.password ="password", # Set above and not echoed
sqldf.RPostgreSQL.dbname ="nfldb",
sqldf.RPostgreSQL.host ="localhost",
sqldf.RPostgreSQL.port =5432)
sqldf("
/* sql comments can be used */
/* Not as nice as mySQL: show tables; */
SELECT * FROM pg_catalog.pg_tables WHERE schemaname = 'public';
")
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL");
con <- dbConnect(drv,
user="postgres",
password="password",
dbname="nfldb",
host="localhost",
port=5432);
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL");
con <- dbConnect(drv,
user="postgre",
password="password",
dbname="nfldb",
host="localhost",
port=5432);
# If necessary download the file (can be improved to download if > n days old)
dbUrl <- "http://burntsushi.net/stuff/nfldb/nfldb.sql.zip"
dbDir = "./data"
dbZipPath <- "./data/nfldb.zip.sql"
dbPath <- "./data/nfldb.sql"
dateDownloadedFile <- "./data/dateDownloaded.txt"
if (!file.exists(dbDir)) {
dir.create(dbDir)
}
if (!file.exists(dbPath)) {
download.file(dbUrl, destfile = dbZipPath)
unzip(dbZipPath, exdir=dbDir)
dateDownloaded <- date()
dateDownloaded
cat(dateDownloaded, file=dateDownloadedFile)
print(paste("Downloaded database", dbPath, "at"))
cat(readChar(dateDownloadedFile, 1e5))
} else if (file.exists(dateDownloadedFile)) {
print(paste("Database", dbPath, "downloaded on"))
cat(readChar(dateDownloadedFile, 1e5))
}
if (!require(RPostgreSQL)) {
install.packages("RPostgreSQL")
library(RPostgreSQL)
}
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv)
con <- dbConnect(drv, dbname="nfldb",host="localhost",port=5433,user="postgre",password="password")
q()
# If necessary download the file (can be improved to download if > n days old)
dbUrl <- "http://burntsushi.net/stuff/nfldb/nfldb.sql.zip"
dbDir = "./data"
dbZipPath <- "./data/nfldb.zip.sql"
dbPath <- "./data/nfldb.sql"
dateDownloadedFile <- "./data/dateDownloaded.txt"
if (!file.exists(dbDir)) {
dir.create(dbDir)
}
if (!file.exists(dbPath)) {
download.file(dbUrl, destfile = dbZipPath)
unzip(dbZipPath, exdir=dbDir)
dateDownloaded <- date()
dateDownloaded
cat(dateDownloaded, file=dateDownloadedFile)
print(paste("Downloaded database", dbPath, "at"))
cat(readChar(dateDownloadedFile, 1e5))
} else if (file.exists(dateDownloadedFile)) {
print(paste("Database", dbPath, "downloaded on"))
cat(readChar(dateDownloadedFile, 1e5))
}
install.packages("RMySQL")
library(RMySQL)
?"dbConnect"
con <- dbConnect(MySQL(),
user="postgre", password="password",
dbname="nfldb", host="localhost")
con <- dbConnect(PostgreSQL(),
user="postgre", password="password",
dbname="nfldb", host="localhost")
?download.file
# install.packages("devtools")
devtools::install_github("RcppCore/Rcpp")
devtools::install_github("rstats-db/DBI")
devtools::install_github("rstats-db/RPostgres")
library(DBI)
# Connect to the default postgres database
con <- dbConnect(RPostgres::Postgres())
dbListTables(con)
library(DBI)
con <- dbConnect(RPostgres::Postgres())
dbListTables(con)
library(RPostgres)
devtools::install_github("rstats-db/RPostgres")
library(RPostgres)
library(RPostgres)
# install.packages("devtools")
devtools::install_github("RcppCore/Rcpp")
devtools::install_github("rstats-db/DBI")
devtools::install_github("rstats-db/RPostgres")
library(RPostgres)
remove.packages(DBI)
remove.packages("DBI")
remove.packages("Rcpp")
remove.packages("RPostgres")
# install.packages("devtools")
devtools::install_github("RcppCore/Rcpp")
devtools::install_github("rstats-db/DBI")
devtools::install_github("rstats-db/RPostgres")
library(RPostgres)
con <- dbConnect(RPostgres::Postgres())
q()
library(RPostgres)
library(DBI)
con <- dbConnect(RPostgres::Postgres())
dbListTables(con)
dbWriteTable(con, "mtcars", mtcars)
dbListTables(con)
con <- dbConnect(RPostgres::Postgres(),dbname = 'nfldb',
host = 'localhost', # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
port = 5432, # or any other port specified by your DBA
user = 'postgre',
password = 'password')
con <- dbConnect(RPostgres::Postgres(),dbname = 'nfldb',
host = 'localhost', # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
port = 5432, # or any other port specified by your DBA
user = 'postgres',
password = 'password')
con <- dbConnect(RPostgres::Postgres(),dbname = 'nfldb',
host = 'localhost',
port = 5433,
user = 'postgres',
password = 'password')
con <- dbConnect(RPostgres::Postgres(),dbname = 'nfldb',
host = 'localhost',
port = 5433,
user = 'postgres')
con <- dbConnect(RPostgres::Postgres(),dbname = 'nfldb',
host = 'localhost',
port = 5433,
user = 'postgres',
password = "password")
# Connect to a specific postgres database i.e. nfldb
con <- dbConnect(RPostgres::Postgres(),dbname = 'nfldb',
host = 'localhost',
port = 5433,
user = 'postgre',
password = "password")
con <- dbConnect(RPostgres::Postgres(),dbname = 'nfldb',
host = 'localhost',
port = 5433,
user = 'postgres',
password = "password")
con <- dbConnect(RPostgres::Postgres(),dbname = 'nfldb',
host = 'localhost',
port = 5432,
user = 'postgres',
password = "password")
con <- dbConnect(RPostgres::Postgres(),dbname = 'nfldb',
host = 'localhost',
port = 5432,
user = 'postgres',
password = "password")
con <- dbConnect(RPostgres::Postgres(),dbname = 'nfldb',
host = 'localhost',
port = 5432,
user = 'navdeepgill',
password = "password")
con <- dbConnect(RPostgres::Postgres())
dbListTables(con)
dbListFields(con, "meta")
library(RPostgres)
library(DBI)
dbListFields(con, "meta")
dbReadTable(con, "mtcars")
dbListFields(con, "mtcars")
dbReadTable(con, "meta")
res <- dbSendQuery(con, "SELECT * FROM team limit 10")
res
dbFetch(res)
dbListTables(con)
res <- dbSendQuery(con, "SELECT * FROM game limit 10")
dbFetch(res)
res <- dbSendQuery(con, "SELECT * FROM game limit 10 where season_year=2015")
dbFetch(res)
res <- dbSendQuery(con, "SELECT * FROM game limit 10 where season_year='2015'")
res <- dbSendQuery(con, "SELECT * FROM game where season_year='2015' limit 10")
dbFetch(res)
#install.packages("RMySQL")
library(RMySQL)
#Connect to mr_unit database
mr_unit = dbConnect(MySQL(), user='root', password='0xdata', dbname='mr_unit', host='172.16.2.178')
#List tables in mr_unit db
dbListTables(mr_unit)
#Show fields in the perf table
dbListFields(mr_unit, 'perf')
#Retrieve data from perf. Only concerned about master
retrieve_perf = dbSendQuery(mr_unit, "select * from perf")
#Get data from perf into R environment
perf = fetch(retrieve_perf, n=-1)
#Convert unix times (start_time & end_time) to date
perf$start_time = as.POSIXct(perf$start_time, origin="1970-01-01")
perf$end_time = as.POSIXct(perf$end_time, origin="1970-01-01")
#Get duration
perf$duration = as.numeric(perf$end_time - perf$start_time)
#' Get all default arguments for an H2O algorithm
#' @param Function Any R function that is in your environment (h2o.glm, h2o.deeplearning, h2o.gbm, data.frame, etc)
GetArgs = function(Function){
#Extract out argument names and default values:
arguments_names = data.frame(as.factor(names(formals(Function))),stringsAsFactors = F)
arguments_vals = data.frame(formals(Function),stringsAsFactors = F)
#arguments_vals[2] = ifelse(arguments_vals == "TRUE",arguments_vals = TRUE,arguments_defaults$arg_value)
#Bind names and default values together to get a frame:
arguments_defaults = cbind(arguments_names,arguments_vals)
colnames(arguments_defaults) = c("arg_name", "arg_value")
#arguments_defaults$vector_args = ""
#Set up new column with an assignment statement that can be easily used:
#arguments_defaults$arg_assign = paste0(arguments_defaults$arg_name, " = ", as.character(arguments_defaults$arg_value))
#arguments_defaults$arg_assign = gsub("\\\\", "", arguments_defaults$arg_assign)
#Return frame:
return(arguments_defaults)
}
glm_args = GetArgs(h2o.glm)
library(h2o)
glm_args = GetArgs(h2o.glm)
#' Get all default arguments for an H2O algorithm
#' @param Function Any R function that is in your environment (h2o.glm, h2o.deeplearning, h2o.gbm, data.frame, etc)
GetArgs = function(Function){
#Extract out argument names and default values:
arguments_names = data.frame(as.factor(names(formals(Function))),stringsAsFactors = F)
arguments_vals = data.frame(unlist(formals(Function),stringsAsFactors = F))
#arguments_vals[2] = ifelse(arguments_vals == "TRUE",arguments_vals = TRUE,arguments_defaults$arg_value)
#Bind names and default values together to get a frame:
arguments_defaults = cbind(arguments_names,arguments_vals)
colnames(arguments_defaults) = c("arg_name", "arg_value")
#arguments_defaults$vector_args = ""
#Set up new column with an assignment statement that can be easily used:
#arguments_defaults$arg_assign = paste0(arguments_defaults$arg_name, " = ", as.character(arguments_defaults$arg_value))
#arguments_defaults$arg_assign = gsub("\\\\", "", arguments_defaults$arg_assign)
#Return frame:
return(arguments_defaults)
}
glm_args = GetArgs(h2o.glm)
#' Get all default arguments for an H2O algorithm
#' @param Function Any R function that is in your environment (h2o.glm, h2o.deeplearning, h2o.gbm, data.frame, etc)
GetArgs = function(Function){
#Extract out argument names and default values:
arguments_names = data.frame(as.factor(names(formals(Function))),stringsAsFactors = F)
arguments_vals = data.frame(unlist(formals(Function)))
#arguments_vals[2] = ifelse(arguments_vals == "TRUE",arguments_vals = TRUE,arguments_defaults$arg_value)
#Bind names and default values together to get a frame:
arguments_defaults = cbind(arguments_names,arguments_vals)
colnames(arguments_defaults) = c("arg_name", "arg_value")
#arguments_defaults$vector_args = ""
#Set up new column with an assignment statement that can be easily used:
#arguments_defaults$arg_assign = paste0(arguments_defaults$arg_name, " = ", as.character(arguments_defaults$arg_value))
#arguments_defaults$arg_assign = gsub("\\\\", "", arguments_defaults$arg_assign)
#Return frame:
return(arguments_defaults)
}
#Some checks of functionality
glm_args = GetArgs(h2o.glm)
#' Get all default arguments for an H2O algorithm
#' @param Function Any R function that is in your environment (h2o.glm, h2o.deeplearning, h2o.gbm, data.frame, etc)
GetArgs = function(Function){
#Extract out argument names and default values:
arguments_names = data.frame(as.factor(names(formals(Function))),stringsAsFactors = F)
arguments_vals = data.frame(as.character(formals(Function)),stringsAsFactors = F)
#arguments_vals[2] = ifelse(arguments_vals == "TRUE",arguments_vals = TRUE,arguments_defaults$arg_value)
#Bind names and default values together to get a frame:
arguments_defaults = cbind(arguments_names,arguments_vals)
colnames(arguments_defaults) = c("arg_name", "arg_value")
#arguments_defaults$vector_args = ""
#Set up new column with an assignment statement that can be easily used:
#arguments_defaults$arg_assign = paste0(arguments_defaults$arg_name, " = ", as.character(arguments_defaults$arg_value))
#arguments_defaults$arg_assign = gsub("\\\\", "", arguments_defaults$arg_assign)
#Return frame:
return(arguments_defaults)
}
#Some checks of functionality
glm_args = GetArgs(h2o.glm)
formals(h2o.glm)
str(formals(h2o.glm))
data.frame(formals(h2o.glm))
data.frame(unlist(formals(h2o.glm)))
?unlist
#' Get all default arguments for an H2O algorithm
#' @param Function Any R function that is in your environment (h2o.glm, h2o.deeplearning, h2o.gbm, data.frame, etc)
GetArgs = function(Function){
#Extract out argument names and default values:
arguments_names = data.frame(as.factor(names(formals(Function))),stringsAsFactors = F)
arguments_vals = data.frame(as.character(formals(Function)),stringsAsFactors = F)
#arguments_vals[2] = ifelse(arguments_vals == "TRUE",arguments_vals = TRUE,arguments_defaults$arg_value)
#Bind names and default values together to get a frame:
arguments_defaults = cbind(arguments_names,arguments_vals)
colnames(arguments_defaults) = c("arg_name", "arg_value")
#arguments_defaults$vector_args = ""
#Set up new column with an assignment statement that can be easily used:
#arguments_defaults$arg_assign = paste0(arguments_defaults$arg_name, " = ", as.character(arguments_defaults$arg_value))
#arguments_defaults$arg_assign = gsub("\\\\", "", arguments_defaults$arg_assign)
#Return frame:
return(arguments_defaults)
}
glm_args = GetArgs(h2o.glm)
glm_args
setwd("~/Desktop/Git/Stats-Math-Computing/Time Series/scripts")
birth = scan("birth.txt")
getwd()
birth = scan("../data/birth.txt")
mean(2+2)
mean(birth)
var(birth)
acf(birth,2)
acf(birth,2,type = "covariance")
x = acf(birth,2,type = "covariance")
x
x = acf(birth,type = "covariance")
x
cor(birth)
?acf
x = acf(birth,type = "correlation")
x
x = acf(birth)
x
var(birth)
