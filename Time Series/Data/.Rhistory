(aft.brn*eta)/[aft.brn*eta+(1-aft.brn)(1-theta)]
(aft.brn*eta)/(aft.brn*eta+(1-aft.brn)(1-theta))
(aft.brn*eta)/(aft.brn*eta+(1-aft.brn)*(1-theta))
aft.brn = seq(m/2 + 1,m); mean(PI[aft.brn])
(.006992759*eta)/(.006992759*eta+(1-.006992759)*(1-theta))
pvn = (.006992759*eta)*theta/(.006992759*(1-eta)+(1-.006992759)*theta)
pvn
pvn = (1-.006992759)*theta/(.006992759*(1-eta)+(1-.006992759)*theta)
pvn
pvn = ((1-.006992759)*theta)/(.006992759*(1-eta)+(1-.006992759)*theta)
pvn
set.seed(5277)
lam = 4; mu = 5; kap = c(lam, lam+mu, mu)
m = 50000; x = t = numeric(m); x[1] = 1
for (i in 2:m) {
t[i-1] = rexp(1, kap[x[i-1]+1]) # states numbered 0, 1, 2
if (x[i-1] == 0) x[i] = 1
if (x[i-1] == 1) x[i] = sample(c(0,2), 1, prob=c(mu, lam))
if (x[i-1] == 2) x[i] = 1 }
t.avg = numeric(3)
for (j in 1:3) {t.avg[j] = sum(t[x==(j-1)])/sum(t)}
round(rbind(0:2, p, t.avg), 3)
rho = lam/mu; rho
L = sum((0:2)*t.avg); L
lam.act = lam*(1 - t.avg[3]); lam.act
W = L/lam.act; W
WQ = 1 - 1/mu;WQ
LQ = lam.act*WG;LQ
WQ = 1 - 1/mu;WQ
LQ = lam.act*WG;LQ
WQ = 1 - 1/mu;WQ
LQ = lam.act*WQ;LQ
set.seed(5277)
lam = 4; mu = 5; kap = c(lam, lam+mu, mu)
m = 50000; x = t = numeric(m); x[1] = 1
for (i in 2:m) {
t[i-1] = rexp(1, kap[x[i-1]+1]) # states numbered 0, 1, 2
if (x[i-1] == 0) x[i] = 1
if (x[i-1] == 1) x[i] = sample(c(0,2), 1, prob=c(mu, lam))
if (x[i-1] == 2) x[i] = 1 }
t.avg = numeric(3)
for (j in 1:3) {t.avg[j] = sum(t[x==(j-1)])/sum(t)}
round(rbind(0:2, p, t.avg), 3)
rho = lam/mu; rho
L = sum((0:2)*t.avg); L
lam.act = lam*(1 - t.avg[3]); lam.act
W = L/lam.act; W
WQ = 1 - 1/mu;WQ
LQ = lam.act*WQ;LQ
set.seed(5277)
lam = 4; mu = 5; kap = c(lam, lam+mu, mu)
m = 50000; x = t = numeric(m); x[1] = 1
for (i in 2:m) {
t[i-1] = rexp(1, kap[x[i-1]+1]) # states numbered 0, 1, 2
if (x[i-1] == 0) x[i] = 1
if (x[i-1] == 1) x[i] = sample(c(0,2), 1, prob=c(mu, lam))
if (x[i-1] == 2) x[i] = 1 }
t.avg = numeric(3)
for (j in 1:3) {t.avg[j] = sum(t[x==(j-1)])/sum(t)}
rho = lam/mu; rho
L = sum((0:2)*t.avg); L
lam.act = lam*(1 - t.avg[3]); lam.act
W = L/lam.act; W
WQ = 1 - 1/mu;WQ
LQ = lam.act*WQ;LQ
t.avg
set.seed(5277)
lam = 4; mu = 5; kap = c(lam, lam+mu, mu)
m = 50000; x = t = numeric(m); x[1] = 1
for (i in 2:m) {
t[i-1] = rexp(1, kap[x[i-1]+1]) # states numbered 0, 1, 2
if (x[i-1] == 0) x[i] = 1
if (x[i-1] == 1) x[i] = sample(c(0,2), 1, prob=c(mu, lam))
if (x[i-1] == 2) x[i] = 1 }
t.avg = numeric(3)
for (j in 1:3) {t.avg[j] = sum(t[x==(j-1)])/sum(t)}
t.avg;
rho = lam/mu; rho
L = sum((0:2)*t.avg); L
lam.act = lam*(1 - t.avg[3]); lam.act
W = L/lam.act; W
WQ = 1 - 1/mu;WQ
LQ = lam.act*WQ;LQ
WQ = W - 1/mu;WQ
LQ = lam.act*WQ;LQ
m = 50000; t = x = a = numeric(m); x[1] = 0 # optional to record a
lam = 4; mu = 5; p.arr = lam/(lam + mu)
for (i in 2:m)
{
arr = sample(0:1, 1, prob=c(1-p.arr, p.arr)); a[i]=arr
t[i-1] = rexp(1, lam+mu)
if (arr==1 & x[i-1]>0) x[i] = x[i-1]+1
if (arr==0 & x[i-1]>0) x[i] = x[i-1]-1
if (x[i-1]==0) {t[i-1] = rexp(1, lam); x[i] = 1; a[i]=1}
}
top = 11; t.avg = numeric(top) # in gen'l might let 'top=max(x)'
for (j in 1:top) {t.avg[j] = sum(t[x==(j-1)])/sum(t)} # time averages
rho = lam/mu; n = 0:(top-1); p = rho^n*(1-rho) # exact
t.avg
l = lam(mu-lam);L
w = L/lam;W
wq = w-1/mu;wq
lq = lam*wq
m = 50000; t = x = a = numeric(m); x[1] = 0 # optional to record a
lam = 4; mu = 5; p.arr = lam/(lam + mu)
for (i in 2:m)
{
arr = sample(0:1, 1, prob=c(1-p.arr, p.arr)); a[i]=arr
t[i-1] = rexp(1, lam+mu)
if (arr==1 & x[i-1]>0) x[i] = x[i-1]+1
if (arr==0 & x[i-1]>0) x[i] = x[i-1]-1
if (x[i-1]==0) {t[i-1] = rexp(1, lam); x[i] = 1; a[i]=1}
}
top = 11; t.avg = numeric(top) # in gen'l might let 'top=max(x)'
for (j in 1:top) {t.avg[j] = sum(t[x==(j-1)])/sum(t)} # time averages
rho = lam/mu; n = 0:(top-1); p = rho^n*(1-rho) # exact
l = lam*(mu-lam);L
w = L/lam;W
wq = w-1/mu;wq
lq = lam*wq
l = lam*(mu-lam);l
w = L/lam;w
wq = w-1/mu;wq
lq = lam*wq
l = lam*(mu-lam);l
w = l/lam;w
wq = w-1/mu;wq
lq = lam*wq
m = 50000; t = x = a = numeric(m); x[1] = 0 # optional to record a
lam = 4; mu = 5; p.arr = lam/(lam + mu)
for (i in 2:m)
{
arr = sample(0:1, 1, prob=c(1-p.arr, p.arr)); a[i]=arr
t[i-1] = rexp(1, lam+mu)
if (arr==1 & x[i-1]>0) x[i] = x[i-1]+1
if (arr==0 & x[i-1]>0) x[i] = x[i-1]-1
if (x[i-1]==0) {t[i-1] = rexp(1, lam); x[i] = 1; a[i]=1}
}
top = 11; t.avg = numeric(top) # in gen'l might let 'top=max(x)'
for (j in 1:top) {t.avg[j] = sum(t[x==(j-1)])/sum(t)} # time averages
rho = lam/mu; n = 0:(top-1); p = rho^n*(1-rho) # exact
l = lam*(mu-lam);l
w = l/lam;w
wq = w-1/mu;wq
lq = lam*wq;lq
t.avg
set.seed(5277)
lam = 4; mu = 5; kap = c(lam, lam+mu, mu)
m = 50000; x = t = numeric(m); x[1] = 1
for (i in 2:m) {
t[i-1] = rexp(1, kap[x[i-1]+1]) # states numbered 0, 1, 2
if (x[i-1] == 0) x[i] = 1
if (x[i-1] == 1) x[i] = sample(c(0,2), 1, prob=c(mu, lam))
if (x[i-1] == 2) x[i] = 1 }
t.avg = numeric(3)
for (j in 1:3) {t.avg[j] = sum(t[x==(j-1)])/sum(t)}
t.avg;
rho = lam/mu; rho
L = sum((0:2)*t.avg); L
lam.act = lam*(1 - t.avg[3]); lam.act
W = L/lam.act; W
WQ = W - 1/mu;WQ
LQ = lam.act*WQ;LQ
P = matrix(c(1,0,0,0,0,0,
.525,0,.475,0,0,0,
0,.525,0,.475,0,0,
0,0,.525,0,.475,0,
0,0,0,.525,0,.475,
0,0,0,0,0,1), nrow = 6, byrow = T )
P2 = P %*% P; round(P2, 3)
P4 = P2 %*% P2; round(P4, 3)
P8 = P4 %*% P4; round(P8, 3)
P16 = P8 %*% P8; round(P16, 3)
P32 = P16 %*% P16; round(P32, 3)
P64 = P32 %*% P32; round(P64, 3)
Q = P[2:5,2:5];
I = matrix(0, ncol=4, nrow=4); for (k in 1:4){I[k, k]=1}
M = solve(I-Q)
rowSums(M)
set.seed(5277)
m = 100000; t = a = numeric(m)
w = c(.525,.475)
for (i in 1:m)
{
x = cs = 3
while ((cs > 0) & (cs < 5))
{
cs = sample(c(-1,1), 1, prob = w) + cs
x = c(x, cs)
}
t[i] = length(x) - 1
a[i] = cs
}
mean(t)
mean(t > 8)
mean(a==0)
mean(a==5)
set.seed(5277)
m = 50000;
PI = numeric(m);
PI[1] = .5
alpha = 1;
beta = 1;
eta = .94;
theta = .96;
n = 1000;
A = 42;
B = n - A
for (i in 2:m) {
num.x = PI[i-1]*eta; den.x = num.x + (1-PI[i-1])*(1 - theta)
X = rbinom(1, A, num.x/den.x)
num.y = PI[i-1]*(1 - eta); den.y = num.y + (1-PI[i-1])*theta
Y = rbinom(1, B, num.y/den.y) # P(D = 1|T = 0) = 1 - gamma
PI[i] = rbeta(1, X + Y + alpha, n - X - Y + beta) }
aft.brn = seq(m/2 + 1,m);
mean(PI[aft.brn])
#95 Bayesian C.I. for prevalance
quantile(PI[aft.brn], c(.025, .975))
#One side Bayesian confidence interval for prevalance
quantile(PI[aft.brn],c(.95))
#Predictive value of positive test. P(D=1|T=1)
pvp = (.006992759*eta)/(.006992759*eta+(1-.006992759)*(1-theta))
#Predictive value of negative test. P(D=0|T=0)
pvn = ((1-.006992759)*theta)/(.006992759*(1-eta)+(1-.006992759)*theta)
pvp
pvn
install.packages("knitr")
set.seed(5277)
lam = 4; mu = 5; kap = c(lam, lam+mu, mu)
m = 50000; x = t = numeric(m); x[1] = 1
for (i in 2:m) {
t[i-1] = rexp(1, kap[x[i-1]+1]) # states numbered 0, 1, 2
if (x[i-1] == 0) x[i] = 1
if (x[i-1] == 1) x[i] = sample(c(0,2), 1, prob=c(mu, lam))
if (x[i-1] == 2) x[i] = 1 }
t.avg = numeric(3)
for (j in 1:3) {t.avg[j] = sum(t[x==(j-1)])/sum(t)}
#Proportion of time spent in each state (0,1,or 2 customers)
t.avg;
#Proportion of time the system is busy
rho = lam/mu; rho
#The expected number of people in the system (waiting and being serviced)
L = sum((0:2)*t.avg); L
#The actual rate of arrival
lam.act = lam*(1 - t.avg[3]); lam.act
#The amount of time spent in the system (waiting and being serviced)
W = L/lam.act; W
#The total time spent waiting or not being served
WQ = W - 1/mu;WQ
#The average number of people waiting in the queue
LQ = lam.act*WQ;LQ
m = 50000; t = x = a = numeric(m); x[1] = 0 # optional to record a
lam = 4; mu = 5; p.arr = lam/(lam + mu)
for (i in 2:m)
{
arr = sample(0:1, 1, prob=c(1-p.arr, p.arr)); a[i]=arr
t[i-1] = rexp(1, lam+mu)
if (arr==1 & x[i-1]>0) x[i] = x[i-1]+1
if (arr==0 & x[i-1]>0) x[i] = x[i-1]-1
if (x[i-1]==0) {t[i-1] = rexp(1, lam); x[i] = 1; a[i]=1}
}
top = 11; t.avg = numeric(top) # in gen'l might let 'top=max(x)'
for (j in 1:top) {t.avg[j] = sum(t[x==(j-1)])/sum(t)} # time averages
rho = lam/mu; n = 0:(top-1); p = rho^n*(1-rho) # exact
l = lam*(mu-lam);l
w = l/lam;w
wq = w-1/mu;wq
lq = lam*wq;lq
t.avg
sum(t.avg)
#Exam problems
#1
P = matrix(c(1,0,0,0,0,0,
.525,0,.475,0,0,0,
0,.525,0,.475,0,0,
0,0,.525,0,.475,0,
0,0,0,.525,0,.475,
0,0,0,0,0,1), nrow = 6, byrow = T )
P2 = P %*% P; round(P2, 3)
P4 = P2 %*% P2; round(P4, 3)
P8 = P4 %*% P4; round(P8, 3)
P16 = P8 %*% P8; round(P16, 3)
P32 = P16 %*% P16; round(P32, 3)
P64 = P32 %*% P32; round(P64, 3)
Q = P[2:5,2:5];Q
I = matrix(0, ncol=4, nrow=4); for (k in 1:4){I[k, k]=1}
M = solve(I-Q);M
#Average turns per starting state ($1,$2,$3,$4)
rowSums(M)
set.seed(5277)
m = 100000; t = a = numeric(m)
w = c(.525,.475)
for (i in 1:m)
{
x = cs = 3
while ((cs > 0) & (cs < 5))
{
cs = sample(c(-1,1), 1, prob = w) + cs
x = c(x, cs)
}
t[i] = length(x) - 1
a[i] = cs
}
#Average number of turns when she starts at $3
mean(t)
#Probability it will take more than 8 turns to finish game
mean(t > 8)
#Probability of getting ruined
mean(a==0)
#Probability of winning it all
mean(a==5)
#2
set.seed(5277)
m = 50000;
PI = numeric(m);
PI[1] = .5
alpha = 1;
beta = 1;
eta = .94;
theta = .96;
n = 1000;
A = 42;
B = n - A
for (i in 2:m) {
num.x = PI[i-1]*eta; den.x = num.x + (1-PI[i-1])*(1 - theta)
X = rbinom(1, A, num.x/den.x)
num.y = PI[i-1]*(1 - eta); den.y = num.y + (1-PI[i-1])*theta
Y = rbinom(1, B, num.y/den.y) # P(D = 1|T = 0) = 1 - gamma
PI[i] = rbeta(1, X + Y + alpha, n - X - Y + beta) }
aft.brn = seq(m/2 + 1,m);
#Calculated posterior prevalance
mean(PI[aft.brn])
#95 Bayesian C.I. for prevalance
quantile(PI[aft.brn], c(.025, .975))
#One side Bayesian confidence interval for prevalance
quantile(PI[aft.brn],c(.95))
#Predictive value of positive test. P(D=1|T=1)
pvp = (.006992759*eta)/(.006992759*eta+(1-.006992759)*(1-theta));pvp
#Predictive value of negative test. P(D=0|T=0)
pvn = ((1-.006992759)*theta)/(.006992759*(1-eta)+(1-.006992759)*theta);pvn
#3
set.seed(5277)
lam = 4; mu = 5; kap = c(lam, lam+mu, mu)
m = 50000; x = t = numeric(m); x[1] = 1
for (i in 2:m) {
t[i-1] = rexp(1, kap[x[i-1]+1]) # states numbered 0, 1, 2
if (x[i-1] == 0) x[i] = 1
if (x[i-1] == 1) x[i] = sample(c(0,2), 1, prob=c(mu, lam))
if (x[i-1] == 2) x[i] = 1 }
t.avg = numeric(3)
for (j in 1:3) {t.avg[j] = sum(t[x==(j-1)])/sum(t)}
#Proportion of time spent in each state (0,1,or 2 customers)
t.avg;
#Proportion of time the system is busy
rho = lam/mu; rho
#The expected number of people in the system (waiting and being serviced)
L = sum((0:2)*t.avg); L
#The actual rate of arrival
lam.act = lam*(1 - t.avg[3]); lam.act
#The amount of time spent in the system (waiting and being serviced)
W = L/lam.act; W
#The total time spent waiting or not being served
WQ = W - 1/mu;WQ
#The average number of people waiting in the queue
LQ = lam.act*WQ;LQ
#4
m = 50000; t = x = a = numeric(m); x[1] = 0 # optional to record a
lam = 4; mu = 5; p.arr = lam/(lam + mu)
for (i in 2:m)
{
arr = sample(0:1, 1, prob=c(1-p.arr, p.arr)); a[i]=arr
t[i-1] = rexp(1, lam+mu)
if (arr==1 & x[i-1]>0) x[i] = x[i-1]+1
if (arr==0 & x[i-1]>0) x[i] = x[i-1]-1
if (x[i-1]==0) {t[i-1] = rexp(1, lam); x[i] = 1; a[i]=1}
}
top = 11; t.avg = numeric(top) # in gen'l might let 'top=max(x)'
for (j in 1:top) {t.avg[j] = sum(t[x==(j-1)])/sum(t)} # time averages
rho = lam/mu;rho
n = 0:(top-1); p = rho^n*(1-rho);p # exact
l = lam*(mu-lam);l
w = l/lam;w
wq = w-1/mu;wq
lq = lam*wq;lq
setwd("/Users/navdeepgill/Desktop/TIME SERIES/Projects/Data")
library(forecast)
library(lmtest)
library(car)
install.packages("forecast")
install.packages("lmtest")
install.packages("car")
#Set working diretory and relevant packages:
setwd("/Users/navdeepgill/Desktop/TIME SERIES/Projects/Data")
library(forecast)
library(lmtest)
library(car)
#A)
#Analyze this data using standard regression techniques. Report your trend and
#seasonal estimates, a table with your point predictions, 95% interval predictions,
#and the interval widths.
#Plot of original time series
plot(birth.ts)
#After an intial review of the time series, I suspect I will need to transform the data using a 5th degree polynomial.
#Plot of first difference
plot(diff(birth.ts,1))
#The variance seems relatively constant over time.
#Set up for regression model
t = time(birth.ts)
month=as.factor(rep(1:12,30))
#Use 5th degree polynomial
birth.poly.5 = lm(birth.ts~poly(t,5,raw=TRUE)+relevel(as.factor(month),ref=1))
#Trend and seasonal estimates
summary(birth.poly.5)
#Forecasting 12 months for 5th degree polynomial model
new.data=data.frame(t=361:372,month=as.factor(1:12))
birth.pred = predict(birth.poly.5, new.data, interval="prediction")
birth.pred
#Prediction widths
pred.width = birth.pred[,3]-birth.pred[,2]
pred.width
plot(birth.ts,xlim=c(0,375),ylim = c(200,450), ylab = "Y", main = "5th Degree Polynomial Fit")
points(361:372,birth.pred[,1],col="red")
points(361:372,birth.pred[,2],col="blue")
points(361:372,birth.pred[,3],col="blue")
lines(361:372,birth.pred[,1],col="red")
lines(361:372,birth.pred[,2],col="blue")
lines(361:372,birth.pred[,3],col="blue")
#Forecasting 12 months for 5th degree polynomial model. Modified xlim to see prediction better
new.data=data.frame(t=361:372,month=as.factor(1:12))
birth.pred = predict(birth.poly.5, new.data, interval="prediction")
plot(birth.ts,xlim=c(350,375),ylim = c(200,450), ylab = "Y", main = "5th Degree Polynomial Fit")
points(361:372,birth.pred[,1],col="red")
points(361:372,birth.pred[,2],col="blue")
points(361:372,birth.pred[,3],col="blue")
lines(361:372,birth.pred[,1],col="red")
lines(361:372,birth.pred[,2],col="blue")
lines(361:372,birth.pred[,3],col="blue")
#Table with point predicitions, 95% confidence intervals, and prediction widths:
birth.forecast = cbind(birth.pred,pred.width)
birth.forecast
#Compare point predictions with actual points:
birth.compare = cbind(birth.pred[,1],birth[361:372])
birth.compare
birth = scan("birth.txt")
birth.ts = ts(birth[1:360])
#A)
#Analyze this data using standard regression techniques. Report your trend and
#seasonal estimates, a table with your point predictions, 95% interval predictions,
#and the interval widths.
#Plot of original time series
plot(birth.ts)
#After an intial review of the time series, I suspect I will need to transform the data using a 5th degree polynomial.
#Plot of first difference
plot(diff(birth.ts,1))
#The variance seems relatively constant over time.
#Set up for regression model
t = time(birth.ts)
month=as.factor(rep(1:12,30))
#Use 5th degree polynomial
birth.poly.5 = lm(birth.ts~poly(t,5,raw=TRUE)+relevel(as.factor(month),ref=1))
#Trend and seasonal estimates
summary(birth.poly.5)
#Forecasting 12 months for 5th degree polynomial model
new.data=data.frame(t=361:372,month=as.factor(1:12))
birth.pred = predict(birth.poly.5, new.data, interval="prediction")
birth.pred
#Prediction widths
pred.width = birth.pred[,3]-birth.pred[,2]
pred.width
plot(birth.ts,xlim=c(0,375),ylim = c(200,450), ylab = "Y", main = "5th Degree Polynomial Fit")
points(361:372,birth.pred[,1],col="red")
points(361:372,birth.pred[,2],col="blue")
points(361:372,birth.pred[,3],col="blue")
lines(361:372,birth.pred[,1],col="red")
lines(361:372,birth.pred[,2],col="blue")
lines(361:372,birth.pred[,3],col="blue")
#Forecasting 12 months for 5th degree polynomial model. Modified xlim to see prediction better
new.data=data.frame(t=361:372,month=as.factor(1:12))
birth.pred = predict(birth.poly.5, new.data, interval="prediction")
plot(birth.ts,xlim=c(350,375),ylim = c(200,450), ylab = "Y", main = "5th Degree Polynomial Fit")
points(361:372,birth.pred[,1],col="red")
points(361:372,birth.pred[,2],col="blue")
points(361:372,birth.pred[,3],col="blue")
lines(361:372,birth.pred[,1],col="red")
lines(361:372,birth.pred[,2],col="blue")
lines(361:372,birth.pred[,3],col="blue")
#Table with point predicitions, 95% confidence intervals, and prediction widths:
birth.forecast = cbind(birth.pred,pred.width)
birth.forecast
statin = c(67/518,77/640,2/179,963/5366,287/1741,23/324,1/42,110/934,1/75)
statin= c(67/518,77/640,2/179,963/5366,287/1741,23/324,1/42,110/934,1/75)
placebo = c(96/503,108/643,6/187,1089/5331,365/1773,32/299,2/52,128/899,1/63)
statin/placebo
statin= c(67/518,77/640,2/179,963/5366,287/1741,23/324,1/42,110/934,1/75)
placebo = c(96/503,108/643,6/187,1089/5331,365/1773,32/299,2/52,128/899,1/63)
relative.risk = statin/placebo
plot(relative.risk)
hist(relative.risk)
statin= c(67/518,77/640,2/179,963/5366,287/1741,23/324,1/42,110/934,1/75)
placebo = c(96/503,108/643,6/187,1089/5331,365/1773,32/299,2/52,128/899,1/63)
relative.risk = statin/placebo
relative.risk
(67/518)/(96/503)
statin= c(67/518,77/640,2/179,963/5366,287/1741,23/324,1/42,110/934,1/75)
placebo = c(96/503,108/643,6/187,1089/5331,365/1773,32/299,2/52,128/899,1/63)
relative.risk = statin/placebo
relative.risk
mean(relative.risk)
statin
placebo
mean(statin)
mean(placebo)
